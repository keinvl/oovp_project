/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;

import java.sql.*;
import javax.xml.crypto.Data;
import net.proteanit.sql.DbUtils;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author ASUS
 */
public class AdminCategory extends javax.swing.JPanel {
    Connection conn = null;
    ResultSet res = null;
    PreparedStatement prep = null;
    Statement statement;
    Boolean exists = false;
    /**
     * Creates new form AdminCategory
     */
    public AdminCategory() {
        initComponents();
        connect();
        display();
    }
    
    private void connect() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String url = "jdbc:mysql://localhost:3306/oovpproject";
            String username = "root";
            String password = "";
            conn = DriverManager.getConnection(url, username, password);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Connection failed: " + e.getMessage());
        }
    }
    
    private void display() {
        try {
            String sql = "Select id, name FROM category";
            prep = conn.prepareStatement(sql);
            res = prep.executeQuery();
            tableCategory.setModel(DbUtils.resultSetToTableModel(res));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Failed to display the data: " + e.getMessage());
        }
    }
    
    private boolean isCategoryExists(String name) {
        try {
            String sql = "SELECT COUNT(*) FROM category WHERE name = ?";
            prep = conn.prepareStatement(sql);
            prep.setString(1, name);
            res = prep.executeQuery();
            if (res.next()) {
                return res.getInt(1) > 0;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error checking category: " + e.getMessage());
        }
        return false;
    }
    
    private boolean isCategoryExistsForUpdate(String name, int currentId) {
        try {
            String sql = "SELECT COUNT(*) FROM category WHERE name = ? AND id != ?";
            prep = conn.prepareStatement(sql);
            prep.setString(1, name);
            prep.setInt(2, currentId);
            res = prep.executeQuery();
            if (res.next()) {
                return res.getInt(1) > 0;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error checking category for update: " + e.getMessage());
        }
        return false;
    }


    private void clear() {
        textName.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCategory = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        textName = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Perpetua", 1, 24)); // NOI18N
        jLabel1.setText("Category Management");

        tableCategory.setBackground(new java.awt.Color(248, 243, 217));
        tableCategory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name"
            }
        ));
        tableCategory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableCategoryMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableCategory);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Name");

        btnSave.setBackground(new java.awt.Color(185, 178, 138));
        btnSave.setText("Save");
        btnSave.setBorderPainted(false);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(185, 178, 138));
        btnUpdate.setText("Update");
        btnUpdate.setBorderPainted(false);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnClear.setBackground(new java.awt.Color(185, 178, 138));
        btnClear.setText("Clear");
        btnClear.setBorderPainted(false);
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(248, 243, 217));
        btnDelete.setText("Delete");
        btnDelete.setBorderPainted(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(textName, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete)))
                .addGap(26, 26, 26))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSave)
                            .addComponent(btnUpdate)
                            .addComponent(btnClear)
                            .addComponent(btnDelete)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(55, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            String name = textName.getText();
            
            if (name.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Name cannot be empty!");
                return;
            }
            
            if (isCategoryExists(name)) {
                JOptionPane.showMessageDialog(null, "Category name already exists!");
                return;
            }
            
            String sql = "INSERT INTO category (name) VALUES (?)";
            prep = conn.prepareStatement(sql);
            prep.setString(1, name);
            prep.executeUpdate();
            JOptionPane.showMessageDialog(null, "Successfully saved!");
            display();
            clear();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Unable to save" + e.getMessage());
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int row = tableCategory.getSelectedRow();
        if (row >= 0) {
            int id = Integer.parseInt(tableCategory.getValueAt(row, 0).toString());
            String name = textName.getText();
 
            if (name.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Name cannot be empty!");
                return;
            }
            
            if (isCategoryExistsForUpdate(name, id)) {
                JOptionPane.showMessageDialog(null, "Category name already exists!");
                return;
            }

            try {
                String sql = "UPDATE category SET name = ? WHERE id = ?";
                prep = conn.prepareStatement(sql); 
                prep.setString(1, name);
                prep.setInt(2, id);
                prep.executeUpdate();
                JOptionPane.showMessageDialog(null, "Successfully update!");
                display();
                clear();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Unable to update" + e.getMessage());
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clear();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int row = tableCategory.getSelectedRow();
        if (row >= 0) {
            int id = Integer.parseInt(tableCategory.getValueAt(row, 0).toString());
        
            try {
                String sql = "DELETE FROM category WHERE id = ?";
                prep = conn.prepareStatement(sql);
                prep.setInt(1, id);
                prep.executeUpdate();
                JOptionPane.showMessageDialog(null, "Successfully deleted!");
                display();
                clear();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Unable to delete" + e.getMessage());
            }
        }    
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tableCategoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableCategoryMouseClicked
        int row = tableCategory.getSelectedRow();
        textName.setText(tableCategory.getValueAt(row, 1).toString());
    }//GEN-LAST:event_tableCategoryMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableCategory;
    private javax.swing.JTextField textName;
    // End of variables declaration//GEN-END:variables
}
